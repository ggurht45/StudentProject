-should definately talk about -0.0f and how i figured out that the axis -> roll, pitch, were behaving very weirdly.

--there is definately a problem with the roll method. it returns 135 when it should return 45. need to subtract answer from pi. to get the correct answer.

--learning about transforms and how they get performed last to first. last transform added is the first to be performed
        //fix translate in superSimpleHandUI
        double transY = fingers.getTranslateY();
        fingers.getTransforms().add(new Translate(0, -6, 0)); // this transform happens first. transforms that get added last, are performed first
        //this below does not work. its hard setting the translate property.
//        fingers.setTranslateY(transY-6); //java coordinate system, y increases downwards. z into the screen, and x to the right.


-- vector cross product. a x b = fingers in direction of A, curl towards B, cross prod = thumb

--matrix multiplication A = A3*A2*A1=Az*Ay*Ax = Aroll*Ayaw*Apitch Jose Pereda's blog leap motion

--    //epiphany. to get to 45, 45 x,-z handshake position.
      //i must add a rotation transform at the end. that basically does a rotation around the y-axis. a 90 yaw. -> flipping -90 yaw.
      //why? because order is always pitch then yaw, then roll. so if you want to do yaw before pitch, it must come seperately.^^

      so many things about rotations i had to learn by myself. if someone were there to explain them, it would have been so hard. it feels like i have been
      struggling in the dark for a long time.
-------------------------------


-- things to remember. -weird coordinate systems. -0s in floating numbers and their effect on axises. -- wrong roll calculations in leapmotions. --flipping
angles of pitch and yaw to use method. --last transform that is added gets executed first in line.  --- rotations follow the order of Pitch first, then yaw,
then roll. if you miss this order or cant fit in something, then you need to execute it before by adding another transform.
-------------------------------

--conventions of rotations. very very very very tricky if not clear in your head.

looking down the opposite of the axis and +theta means to revolve counterclockwise around axis when looking down opposite end of axis
javafx cs vs lm coordinate system adds to the subtleties.

one small mistake leads to whole thing looking like a mess
----------------------------






----------------------------
Note about *different* ways to transform a hand to make it point up.
        //very interesting thing to note about rotations and the order of operations p,y,r
        // for the the hand pointing to the right and palm facing down, the rotations to transform it into a vertical position with palm facing -z direction
        // can be 1) -90 yaw, followed by 90 pitch. (this doesn't respect the order of operations so it is impossible to do with the matrixRotate method.)
        // or 2)90 pitch, -90 roll. this works fine and gets the job done also.
        // or 3)-90 roll, followed by -90 yaw. (this doesn't respect the order of operations so it is impossible to do with the matrixRotate method.)
        // or 4) First add a new transform that performs a -90 degree yaw around the JavafxCS y-axis. This transform will be written after the other
        // transforms in code, but it will be performed first in terms of the rotational transforms.  (means spin 90 degrees *clockwise* cuz note the
        // negative sign, when looking into the -yaxis direction (java_cs)). and then add a 90 degree pitch using the matrixRotateNode function.
        // or 5) add a transform of pitch around x-axis by 90, and then write a transform of -90 yaw around the yaxis. this works, but for some reason
        // seems to translate the whole hand up by a bit and its not even possible to see the translating transform.
----------------------------
















